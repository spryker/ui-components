@import './grid.theme.less';

/**
 * Returns grid selectors.
 * @param {Map} @grid-breakpoints-prop [@breakpoints]
 * @param {Map} @grid-gutter-prop [@grid-gutter]
 * @param {Number} @grid-columns-prop [@grid-columns]
 * @param {Mixin} @grid-breakpoints-map [.grid-breakpoints-config-default()]
 *
 * * **How to extend grid-breakpoints-config-default mixin**
 * ```less
 *  .override-breakpoints-map() {
 *    .grid-breakpoints-config-default();
 *
 *    @gutter: false;
 *  }
 * ```
 */
.spy-grid-mixin(
  @grid-breakpoints-prop: @breakpoints,
  @grid-gutter-prop: @grid-gutter,
  @grid-columns-prop: @grid-columns,
  @grid-breakpoints-map: .grid-breakpoints-config-default(),
) {
  .@{grid-row-prefix-cls} {
    display: flex;
    flex-flow: row wrap;
    align-items: stretch;
    justify-content: flex-start;

    .grid-gutter-mixin(@grid-breakpoints-prop, margin, @grid-gutter-prop, @grid-breakpoints-map[@gutter], true);
    .grid-nested-mixin(@grid-breakpoints-prop, flex-direction, @grid-directions, @grid-breakpoints-map, direction);
    .grid-variant-mixin(@grid-breakpoints-prop, flex-wrap, @grid-wrap, @grid-breakpoints-map, wrap);
    .grid-variant-mixin(@grid-breakpoints-prop, align-content, @grid-align-content, @grid-breakpoints-map);

    &:not([class*='-direction']) {
      .grid-align-mixin(@grid-breakpoints-prop, row, @grid-breakpoints-map);
    }

    &-full-height {
      height: 100%;
      margin-top: 0;
      margin-bottom: 0;
    }
  }

  .@{grid-col-prefix-cls} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;

    &-basis-auto {
      flex-basis: auto;
    }

    &-respect-max-size {
      min-width: 0;
    }

    .grid-gutter-mixin(@grid-breakpoints-prop, padding, @grid-gutter-prop, @grid-breakpoints-map[@gutter]);

    .loop-mixin(@grid-columns-prop, {
      .grid-span-mixin(@i);

      &-@{i} {
        flex-grow: 0;
        flex-basis: @column-value;
        max-width: @column-value;
      }

      &-push-left-@{i} {
        margin-left: @column-value;
      }

      &-push-right-@{i} {
        margin-right: @column-value;
      }
    });

    each(@grid-breakpoints-prop, .(@edges, @breakpoint-key) {
      .breakpoint-edge-min-mixin(@edges);

      .breakpoint-media-between-mixin(@breakpoint-edges[min], @breakpoint-edges[max], {
        .loop-mixin(@grid-columns-prop, {
          .grid-span-mixin(@i);

          &-@{breakpoint-key}-@{i} {
            flex-grow: 0;
            flex-basis: @column-value;
            max-width: @column-value;
          }

          &-push-left-@{breakpoint-key}-@{i} {
            margin-left: @column-value;
          }

          &-push-right-@{breakpoint-key}-@{i} {
            margin-right: @column-value;
          }
        });

        &-@{breakpoint-key}-hidden {
          display: none;
        }
      })
    });
  }
}
